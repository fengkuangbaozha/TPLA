combinedgtf <- read.delim("~/sunyd/identify/cucumber_rnaseq/SRRadd/cuff75.combined.gtf",header=F)
combinedgtfname <- read.delim("~/sunyd/identify/cucumber_rnaseq/SRRadd/cuff75.combined.gtfname",header=F,stringsAsFactors = FALSE) 
lncgtf <- read.delim("~/sunyd/identify/cucumber_rnaseq/SRRadd/cuff75-CPC_left.gtf",header=F)
library("seqinr")
combinedfasta <- read.fasta(file = "~/sunyd/identify/cucumber_rnaseq/SRRadd/cuff75.combinedonelinename.fa") 
#lncrnafasta <- read.fasta(file = "~/sunyd/identify/cucumber_rnaseq/SRRadd/cuff75-CPC_left.fa")
##loci <- read.delim("~/sunyd/identify/cucumber_rnaseq/SRRadd/cuff75_gene.loci",header=F)
##loci <- loci[,c(1,2,4,6,7)]
#########extract only geneid, transid, and classcode#######
nameext <- function(x){
 y <- strsplit(as.character(x[,9]),"; ") #####split the last item, and extract geneid, transcriptid
 z <- data.frame(NA,NA,NA,NA)
 for (i in 1:length(y)){
	 a <- as.matrix(y[[i]])
	 z[i,1] <- a[apply(a, 1, function (x) grepl('gene_id', x))]
	 z[i,2] <- a[apply(a, 1, function (x) grepl('transcript_id', x))]
	 z[i,3] <- a[apply(a, 1, function (x) grepl('class_code', x))]
	 z[i,4] <- a[apply(a, 1, function (x) grepl('oId', x))]
	 	}
 z <- cbind(z,(x[,5]-x[,4]),x[,c(4,5,7)])   ###add the exon position and length info####
 colnames(z) <- c("gene_id","transcript_id","class_code","oId","exonlength","start","end","strand")
 return(z)
}
combinedgenename <- cbind(combinedgtfname[,c(1,2,4,3)],(combinedgtf[,5]-combinedgtf[,4]),combinedgtf[,c(4,5,7)])   ##calculate the whole combined gtf file name info from combined gtf and gtf name file
colnames(combinedgenename) <- c("gene_id","transcript_id","class_code","oId","exonlength","start","end","strand")
genename <- unique(combinedgenename[grep("Csa",combinedgenename$oId),1:2])
print(nrow(genename))
lncgenename <- nameext(lncgtf)  ######calculate the lncRNA info from lncRNA gtf file
lncname <- unique(lncgenename[-(grep("Csa",lncgenename$oId)),1:2])     ###delete those complete match lncRNAs
print(nrow(lncname))
#################delete those geneid transcriptid prefix###########
codeext <- function(x){
        class1 <- strsplit(as.character(x[,1])," ")        
        class2 <- strsplit(as.character(x[,2])," ")
        z <- data.frame(NA,NA)
         for (i in 1:length(class1)){   
                a <- class1[[i]]
                b <- class2[[i]]
                z[i,1] <- a[grepl('XLOC', a)]
                z[i,2] <- b[grepl('TCONS', b)]
                }
        colnames(z) <- c("gene_id","transcript_id")
        return(z)   
        }
genenamepure <- codeext(genename)
lncnamepure <- codeext(lncname)
##########count the exon number################
exoncount <- function(x){    #######exon count number for all transcripts(isoforms)######
	exonname <- unique(x[,1:2])   ##extract the name of geneid and transcriptid
	exon <- x[,2]   ###for genename input
	count <- cbind(exonname,as.matrix(table(exon)))
	count <- as.data.frame(count,stringsAsFactors=F)
	return(count)
	}
combinedexon <- exoncount(combinedgenename)   #####exon counts for the all genes
lncexon <- combinedexon[which(as.character(combinedexon$transcript_id) %in% lncname$transcript_id),]
geneexon <- combinedexon[which(as.character(combinedexon$transcript_id) %in% genename$transcript_id),]
##########calculate the number of each exon number for barplot##########
barinput <- function(x){              
	tmp <- data.matrix(table(x[,3]))
	tmp <- (c(tmp[1:15,],sum(tmp[16:nrow(tmp),])) / sum(tmp)) * 100
	return(tmp)
	}
lncbar <- barinput(lncexon)
genebar <- barinput(geneexon)
pdf("lnc_exonnum.pdf")
barplot(rbind(genebar,lncbar),beside=T,main="Exons per transcript",ylab="Proportion",col=c("lightgrey","purple"),legend=c("Genes","Long noncoding RNAs"))
dev.off()

#############the exon length distribution##########
lncexonlen <- combinedgenename[which(as.character(combinedgenename$transcript_id) %in% lncname$transcript_id),]
geneexonlen <- combinedgenename[which(as.character(combinedgenename$transcript_id) %in% genename$transcript_id),]
pdf("lnc_exonlen.pdf")
plot(density(geneexonlen$exonlength),type="l", xlab = "exon length",ylab = "Density",col="blue",main="Exon length distribution")
lines(density(lncexonlen$exonlength),col = "red")
legend("topright",legend=c("Long noncoding RNAs","Genes"),col=c("red","blue"),bg="white",lwd=2)
dev.off()

#############the sequence composition information###############
#####calculating the sequence length info ################
sequencecompostion <- function(x,filename){
 matall <- matrix(NA,ncol=132,nrow=length(x)) 
 for (i in 1:length(x)){
  a <- x[[i]]
  aname <- attr(a,"name")   ###the name of this gene
  len <- length(a)  ### calculating the sequence length
  print(len)
####calculating the  GC, AU and the divided content ###########
gccontent <- function(x){
        gc <- GC(x)       ### calculating the GC content
        au <- 1 - gc      ### calculating the AU content
        gc2au <- gc / au  ### calculating the GC/AU value
        result <- matrix(c(gc,au,gc2au),nrow=1)
        return(result)
}
gc <- gccontent(a)   # calculating the GC content of the sequence
print(gc)
matrix1 <- cbind(c(len),gc)  ##put the length and GC content indices into a matrix
colnames(matrix1) <- c("sequence_length","GC_cotent","AU_content","GC/AU")
print(matrix1)

###calculating the base frequency
basecount <- function(x,num,s){
        countnum <- as.matrix(count(x, num, start = s, freq = TRUE))    #start means the start position and begins with 0.
        #countper <- countnum / sum(countnum)
        result <- t(countnum)
        return(result)
        }

########## calculating codon usage bias eff, freq, rsuc value #########
codonbias <- function(seq,s){
        countindices <- uco(seq, frame = s, index = c("eff", "freq", "rscu"), as.data.frame = TRUE,NA.rscu = 0) ##frame means the start position and begins with 0.
        triname <- rownames(countindices)
        effname <- paste(triname, "eff", sep = "_")   ###change the name of index
        eff <- matrix(countindices[,3],nrow=1)
        colnames(eff) <- effname                     ###convert the names into the changed name
        return(eff)
        }

#########  calculating  the tri-bases index #########
tri_index <- function(x,s){
        bs1 <- basecount(x,3,s)   ###calculating the tri-bases frequency in different positions
        cs1 <- codonbias(x,s)     ###measuring the codon usage bias indices
        m <- cbind(bs1,cs1)     ###combine them into one row matrix
        return(m)       
        }
        
#######  choose the ORF order for three nucleotides #########
tri_sum <- function(x){
        index1 <- tri_index(a,0)
        index2 <- tri_index(a,1)
        index3 <- tri_index(a,2)
        index4 <- tri_index(a,3)
        index5 <- tri_index(a,4)
        index6 <- tri_index(a,5)
        mat <- (index1 + index2 + index3 + index4 + index5 + index6) 
        return(mat)
}
matrix2 <- tri_sum()
#print(matrix2)

######combine several several matrix into a sum and write to a file ##################
matrixsum <- cbind(matrix1,matrix2)
rownames(matrixsum) <- aname    ###put the gene name as the rowname
#print(matrixsum)
matall[i,] <- matrixsum
######### set the header for the features in the file ################
colsname <- matrix(colnames(matrixsum),nrow=1)      #######assign the name of the matrix to another one 
header <- cbind(c("RNA_name"),colsname)            #######print the header of the file
#write.table(header, file = filename, append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)   ####write the header in the first line

write.table(matrixsum, file = filename, append = TRUE, quote = FALSE, sep = "\t", row.names = TRUE, col.names = FALSE)   ### write the value in the following lines
}
return(matall)
}
wholemat <- sequencecompostion(combinedfasta,"~/sunyd/identify/cucumber_rnaseq/SRRadd/lnclength.txt")

##########sequence length distribution plot##########

########calculate the class code count and extract different class categories###############
#classcode <- as.matrix(genename[,3])
#classcodecount <- as.matrix(table(classcode))
codeext <- function(x,y){
	class <- x[which(x[,3]== (paste(" class_code ",y,sep=""))),]
	return(class)	
	}
jclass <- codeext(lncgenename,"j")
iclass <- codeext(lncgenename,"i")
oclass <- codeext(lncgenename,"o")
uclass <- codeext(lncgenename,"u")
xclass <- codeext(lncgenename,"x")
eclass <- codeext(lncgenename,"=")
cclass <- codeext(lncgenename,"c")

######show the transcript name and exon location info#############
#gtforder <- combinedgenename[order(combinedgenename[,1],combinedgenename[,6]),]
#exoncombine <- function(a){
#tmp <- data.frame(gene_id=NA,transcript_id=NA,class_code=NA,oId=NA,exonlength=NA,start=NA,end=NA,strand=NA)
#for (i in 1:nrow(a)){                #(nrow(gtforder)-1)){
#	x <- a[i,] 
#	y <- a[(i+1),]
#  if (x[1] == y[1] && y[6] >= x[6] && y[7] <= x[7]){
#	  tmp[i,] <- a[i,]
#	  a <- a[-(i+1),]
#  }else if (x[1] == y[1] && y[6] >= x[6] && y[7] >= x[7]){
#    tmp[i,] <- a[i,]
#	tmp[i,7] <- a[(i+1),7]
 #   a <- a[-(i+1),]
#  }else if (x[1] == y[1] && y[6] <= x[6] && y[7] <= x[7]){
#	tmp[i,]  <- a[i,]
#	tmp[i,6] <- a[(i+1),6]
#    a <- a[-(i+1),]
 # }else{
  #  tmp[i,] <- a[i,]
##	  }
#	}
#	return(tmp)
#}
#gtfcombine <- exoncombine(gtforder)


#gtforder[(i+1),1] == gtforder[i,1] && gtforder[(i+1),5] <= gtforder[i,5] && gtforder[(i+1),6] <= gtforder[i,6]
